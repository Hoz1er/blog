<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[C# .NET 【不定期更新】]]></title>
    <url>%2F2018%2F04%2F28%2FDotNet%2F</url>
    <content type="text"><![CDATA[特殊情况解决方案POST请求中Request数据过大，JSON反序列化时字符串的长度超过了为maxJsonLength属性设置的值解决方案：1234567891011121314151617181920212223242526272829303132&lt;!--web.config--&gt;&lt;!--设置最大请求长度--&gt;&lt;httpRuntime maxRequestLength="1048576" executionTimeout="1200" targetFramework="4.5" /&gt;``` ...hkjhhkj#### 11111111```CSharp//反序列化public static T DeserializeRequest&lt;T&gt;()&#123; Stream req = System.Web.HttpContext.Current.Request.InputStream; req.Seek(0, System.IO.SeekOrigin.Begin); string json = new StreamReader(req).ReadToEnd(); return JsonConvert.DeserializeObject&lt;T&gt;(json);&#125;/***************使用示例***************/public class MyModel&#123; public string imgBase64&#123;get;set;&#125; public MyModel()&#123; &#125;&#125;public void UploadImg()&#123; MyModel myModel = DeserializeRequest&lt;MyModel&gt;(); /* * MyDeal(myModel); */&#125;]]></content>
      <tags>
        <tag>C#</tag>
        <tag>.NET</tag>
        <tag>MVC</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang笔记 【不定期更新】]]></title>
    <url>%2F2017%2F12%2F09%2Fgo%2F</url>
    <content type="text"><![CDATA[在Linux服务器上部署GO项目 上传源码(test.go)至linux服务器上的%GOPATH%/src/test(新建文件夹)目录中编译1go build test 后台运行GO项目123nohup ./test &amp; &gt;test.log &amp;或直接nohup ./test &amp;]]></content>
      <tags>
        <tag>Go</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue笔记 【不定期更新】]]></title>
    <url>%2F2017%2F11%2F20%2Fvue%2F</url>
    <content type="text"><![CDATA[监听事件123456789&lt;a v-on:click="doTheThing"&gt;&lt;/a&gt;&lt;!--简写：--&gt;&lt;a @click="doTheThing"&gt;&lt;/a&gt;&lt;!--修饰符 (可只使用修饰符 e.g.,&lt;a v-on:click.stop&gt;&lt;/a&gt;) .stop [仅限原生DOM事件] 阻止传播 .prevent [仅限原生DOM事件] 不重载页面 .capture [仅限原生DOM事件] 捕获 即内部元素触发的事件先在此处处理，然后才交由内部元素自身进行处理.self [仅限原生DOM事件] 只当在 event.target 是当前元素自身时触发处理函数 即事件不是从内部元素触发的 .once 点击事件将只会触发一次--&gt; 监听组件的原生事件1234&lt;!--使用.native修饰--&gt;&lt;my-component v-on:click.native="doTheThing"&gt;&lt;/my-component&gt;&lt;!--e.g.--&gt;&lt;router-link to="/" v-on:click.native="doTheThing"&gt;X&lt;/router-link&gt; 方法放在DOM更新之后执行12345678910111213141516171819202122232425262728293031new Vue(&#123; // ... methods: &#123; // ... example: function () &#123; // 修改数据 this.message = 'changed' // DOM 还没有更新 this.$nextTick(function () &#123; // DOM 现在更新了 // `this` 绑定到当前实例 this.doSomethingElse() &#125;) &#125; &#125;&#125;);//e.g.methods:&#123; //重置Canvas RefreshCanvas:function()&#123; //修改Canvas宽度高度 this.canvasWidth=NEW_WIDTH; this.canvasHeight=NEW_HEIGHT; //数据已改变 DOM尚未更新 this.$nextTick(function()&#123; //DOM已更新 this.$refs.eleImgCanvas.getContext("2d").clearRect(0, 0, this.canvasWidth,this.canvasHeight); &#125;); &#125;&#125;]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL语句 【不定期更新】]]></title>
    <url>%2F2017%2F09%2F19%2Fsql-1%2F</url>
    <content type="text"><![CDATA[SQL语句获取连续的日期/时间123456declare @Start datetime;declare @End datetime;select [Date] =CONVERT(char(4), DATEADD(YEAR, [number], @Start), 121)from master..spt_valueswhere type = 'p' and [number] &lt; DATEDIFF(YEAR,@Start,@End) + 1group by CONVERT(char(4), DATEADD(YEAR, [number], @Start), 121 注：最多2048行记录 向自增列插入指定数值1234--表t 字段： [ID]:自增主键 [Name]SET IDENTITY_INSERT [dbo].[t] ONinsert into [dbo].[t] ([Id],[Name]) values(1,'1')SET IDENTITY_INSERT [dbo].[t] OFF 注：1.请及时使用SET IDENTITY_INSERT [dbo].[t] OFF关闭自增列的自定义数值插入2.每一次连接会话中的任一时刻，只能对一个表设置IDENTITY_INSERT ON，且设置只对当前会话有效3.插入时一定要列出该标识列 生成数据字典1234567891011121314151617181920212223242526use your-database --指明数据库 goSELECT 表名=case when a.colorder=1 then d.name else '' end, 表说明=case when a.colorder=1 then isnull(f.value,'') else '' end, 字段序号=a.colorder, 字段名=a.name, 标识=case when COLUMNPROPERTY(a.id,a.name,'IsIdentity')=1 then '√'else '' end, 主键=case when exists(SELECT 1 FROM sysobjects where xtype='PK' and name in (SELECT name FROM sysindexes WHERE indid in(SELECT indid FROM sysindexkeys WHERE id = a.id AND colid=a.colid ))) then '√' else '' end, 类型=b.name, 长度=COLUMNPROPERTY(a.id,a.name,'PRECISION'), 占用字节数=a.length, 小数位数=isnull(COLUMNPROPERTY(a.id,a.name,'Scale'),0), 允许空=case when a.isnullable=1 then '√'else '' end, 默认值=isnull(e.text,''), 字段说明=isnull(g.[value],'') FROM syscolumns a left join systypes b on a.xtype=b.xusertype inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name&lt;&gt;'dtproperties' left join syscomments e on a.cdefault=e.id left join sys.extended_properties g on a.id=g.major_id and a.colid=g.minor_id left join sys.extended_properties f on d.id=f.major_id and f.minor_id =0 --where d.name='要查询的表' --仅生成指定表的数据字典 order by d.name,a.id,a.colorder]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React - 使用create-react-app快速创建和部署]]></title>
    <url>%2F2017%2F09%2F18%2FReact-1%2F</url>
    <content type="text"><![CDATA[更多信息请查阅create-react-app生成的模板项目中的README.md 创建React项目Step 1:npm install -g create-react-app全局安装create-react-app Step 2:create-react-app my-app快速生成React模板项目 Step 3:进入目录并预览项目12cd my-appnpm start Step 4:此时访问http://localhost:300即可预览项目 React部署 - Gtithub Pages Step 1:在package.json中添加homepage配置123"homepage":"https://myusername.github.io/my-app"//如果为Github Pages添加自定义域名则为"homepage":"http(s)://mydomian/" Step 2:安装gh-pages:12npm install --save gh-pagesyarn add gh-pages Step 3:在package.json的scripts中添加deploy,即下面两行 12345 "scripts": &#123;+ "predeploy": "npm run build",+ "deploy": "gh-pages -d build", "start": "react-scripts start", "build": "react-scripts build", Step 4:使用 npm run deploy部署至github1npm run deploy Step 5:确保项目的 gh-pages分支中Github Pages设置无误 Step 6:自定义域名的CNAME文件在public/目录下添加CNAME文件，部署时自动上传至gh-pages分支]]></content>
      <tags>
        <tag>React</tag>
        <tag>GitHub Pages</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IIS无法下载特殊后缀文件的解决方法]]></title>
    <url>%2F2017%2F07%2F07%2F1%2F</url>
    <content type="text"><![CDATA[原因分析&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在windows服务器上搭建有上传/下载文件功能的网站时，可能会遇到用户上传了特殊后缀文件无法下载的情况。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（ps: 大部分网站的大部分用户在大部分情况不会上传特殊后缀文件，当你看到这篇文章的时候，大概是测试猿想找你喝茶了 /斜眼）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;出现这种情况的原因主要有以下几种：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. 该后缀未包括在网站配置的 MIME类型 中；&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. 该后缀在网站配置的 请求筛选 中，请求被阻止（如：.aspx , .cs）；&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3. 该文件的同级目录下含有特殊后缀文件（如：.config），使得该目录受安全限制，所有文件无法下载 解决方法 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. 修改/增加网站的 MIME类型 文件扩展名 MIME类型 说明 .* application/octet-stream 针对特殊后缀文件 . application/octet-stream 针对无后缀文件 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. 禁用网站的 请求筛选 中对应项（是否存在安全方面的隐患？）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3. 更改文件后缀（如，统一追加.xx），再结合【1】，保证.xx后缀可被识别]]></content>
      <tags>
        <tag>IIS</tag>
        <tag>windows服务器</tag>
        <tag>下载</tag>
        <tag>特殊后缀</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F07%2F07%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>